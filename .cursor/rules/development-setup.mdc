---
description: Development environment, scripts, tools, and workflow
---

# Development Setup & Workflow

This project uses Bun as the package manager with Next.js 15 and specific development tools.

## Package Manager

### Using Bun
- **Primary package manager:** Bun (not npm or yarn)
- Install dependencies: `bun install`
- Run scripts: `bun run [script]`
- Add packages: `bun add [package]`
- Add dev dependencies: `bun add -D [package]`

### Package Configuration
See [package.json](mdc:package.json) for:
- Dependencies: React 19, Next.js 15, Velite, MDX plugins
- Dev dependencies: Biome, TypeScript, Tailwind CSS
- Scripts: dev, build, start, lint, fix

## Development Scripts

### Available Scripts
```bash
bun run dev    # Start development server
bun run build  # Build for production
bun run start  # Start production server
bun run lint   # Lint code with Biome
bun run fix    # Fix linting and formatting issues
```

### Development Workflow
1. Start development: `bun run dev`
2. Edit code and see live updates
3. Fix linting issues: `bun run fix`
4. Build for production: `bun run build`
5. Test production build: `bun run start`

## Code Quality Tools

### Biome
- **Configuration:** [biome.json](mdc:biome.json)
- **Purpose:** Code formatting and linting
- **Usage:**
  - Format code: `bunx biome format --write .`
  - Lint code: `bunx biome lint --write .`
  - Check all: `bunx biome check --write .`

### Biome Features
- Fast, single-tool alternative to ESLint + Prettier
- Automatic import sorting
- Consistent code formatting
- TypeScript-first design

### Pre-commit Best Practices
Before committing:
1. Run `bun run fix` to format and lint
2. Fix any remaining issues
3. Ensure build passes: `bun run build`

## TypeScript Configuration

### TSConfig
- **Configuration:** [tsconfig.json](mdc:tsconfig.json)
- **Strict mode:** Enabled for type safety
- **Path aliases:** `@/*` maps to `src/*`
- **Module resolution:** Bundler mode for Next.js 15

### Import Patterns
```typescript
// Absolute imports using @/ alias
import { Component } from "@/components/Component";
import { utility } from "@/utils/utility";
import { API_URL } from "@/constants/network";

// Velite content imports
import { development } from "#site/contents";
```

### Type Safety
- Always use explicit types for function parameters
- Define interfaces for complex objects
- Use TypeScript strict mode
- Avoid `any` type

## Build Configuration

### Next.js Config
- **Configuration:** [next.config.mjs](mdc:next.config.mjs)
- **Output:** Standalone (for Docker/containerization)
- **Page extensions:** `.js`, `.jsx`, `.md`, `.mdx`, `.ts`, `.tsx`
- **MDX:** Integrated with `@next/mdx`

### Velite Integration
- Velite runs automatically before Next.js dev/build
- Watch mode during development
- Clean build in production
- Configuration: [velite.config.js](mdc:velite.config.js)

## Styling Configuration

### Tailwind CSS
- **Config:** `tailwind.config.js` (if exists) or inline config
- **PostCSS:** [postcss.config.mjs](mdc:postcss.config.mjs)
- **Global styles:** [src/app/globals.css](mdc:src/app/globals.css)

### CSS Processing
- Tailwind CSS for utility classes
- `@tailwindcss/typography` for content styling
- `tailwindcss-animate` for animations
- PostCSS for CSS processing

## UI Components

### shadcn/ui
- **Configuration:** [components.json](mdc:components.json)
- **Components:** [src/components/ui/](mdc:src/components/ui/)
- **Add components:** `bunx shadcn@latest add [component]`

### Component Library
Current components:
- Accordion
- Button
- Form
- Label
- Sheet

## Development Environment

### Node Version
- Use Node.js 20+ (specified in `@types/node`)
- Bun handles Node.js compatibility

### Environment Variables
- Create `.env.local` for local development
- Never commit `.env.local` to repository
- Use environment variables for:
  - API endpoints
  - API keys
  - Configuration settings

### Port Configuration
- Default dev port: 3000
- Can be changed with `-p` flag: `bun run dev -p 3001`

## Version Control

### Git Practices
- Use Gitmoji for commit messages (gitmoji-cli installed)
- Follow conventional commit patterns
- Keep commits atomic and descriptive
- Example: `âœ¨ feat: add new blog post feature`

### Gitignore
Ignored directories/files:
- `node_modules/`
- `.next/`
- `.velite/`
- `.env*.local`
- Build outputs

## Docker Support

### Dockerfile
- **Configuration:** [Dockerfile](mdc:Dockerfile)
- **Output mode:** Standalone (configured in Next.js)
- **Purpose:** Production deployment

### Docker Build
```bash
docker build -t hyeok-blog .
docker run -p 3000:3000 hyeok-blog
```

## Debugging

### Development Debugging
- Use browser DevTools
- Check Next.js dev server console
- Use React Developer Tools
- Enable verbose logging in [next.config.mjs](mdc:next.config.mjs)

### Build Debugging
- Check build output for errors
- Review `.next/` directory structure
- Verify Velite generated content in `.velite/`
- Test production build locally before deployment

## Performance Optimization

### Development
- Use Fast Refresh for instant updates
- Enable TypeScript incremental compilation
- Use Turbopack (if available in Next.js 15)

### Production
- Minimize bundle size
- Optimize images (use Next.js Image component)
- Use proper caching strategies
- Enable compression

## Common Issues

### Velite Build Errors
- Check MDX frontmatter format
- Verify content file paths match collection patterns
- Ensure all required fields are present

### Type Errors
- Run `bun run fix` for import organization
- Check TypeScript strict mode compliance
- Verify type definitions are up to date

### Styling Issues
- Clear `.next/` cache: `rm -rf .next/`
- Rebuild Tailwind: restart dev server
- Check CSS import order

## Best Practices

### Code Organization
- Keep components focused and reusable
- Use proper TypeScript types
- Follow existing patterns in codebase
- Write self-documenting code

### Dependency Management
- Regularly update dependencies: `bun update`
- Review dependency changes before updating
- Test thoroughly after updates
- Keep Bun updated: `bun upgrade`

### Documentation
- Comment complex logic
- Update README for major changes
- Document new patterns in Cursor Rules
- Keep configuration files well-documented
