---
alwaysApply: true
description: Project structure and architecture guidelines for Hyeok's blog
---

# Project Structure & Architecture

This is a Next.js 15 blog application with MDX content management using Velite. The project follows a specific structure for content organization and component architecture.

## Core Architecture

- **Framework**: Next.js 15 with App Router
- **Content Management**: Velite for MDX processing and static generation
- **Styling**: Tailwind CSS with custom components
- **Package Manager**: Bun
- **Linting**: Biome for code formatting and linting

## Directory Structure

### Content Organization
- Content files are stored in [src/contents/](mdc:src/contents/) with the following structure:
  - `study/development/` - Development tutorials and guides
  - `study/paper-review/` - Academic paper reviews
  - `study/project/` - Project documentation
  - `writing/book-review/` - Book reviews
  - `writing/personal-essay/` - Personal essays
  - `writing/light-topic/` - Light topics and casual posts

### Component Architecture
- **Layout Components**: [src/components/pageLayout.tsx](mdc:src/components/pageLayout.tsx), [src/components/postPageLayout.tsx](mdc:src/components/postPageLayout.tsx)
- **Navigation**: [src/components/navigation.tsx](mdc:src/components/navigation.tsx) with responsive sidebar and mobile navigation
- **UI Components**: [src/components/ui/](mdc:src/components/ui/) contains shadcn/ui components
- **Content Components**: [src/components/postList.tsx](mdc:src/components/postList.tsx) for post listings

### Routing Structure
- Uses Next.js App Router with route groups in [src/app/(routes)/](mdc:src/app/(routes)/)
- API routes in [src/app/api/](mdc:src/app/api/)
- Dynamic routes follow the pattern: `/[category]/[subcategory]/[slug]`

## Key Configuration Files

- **Velite Config**: [velite.config.js](mdc:velite.config.js) - Defines content collections and MDX processing
- **Next.js Config**: [next.config.mjs](mdc:next.config.mjs) - MDX integration and build configuration
- **Biome Config**: [biome.json](mdc:biome.json) - Code formatting and linting rules
- **Package Config**: [package.json](mdc:package.json) - Dependencies and scripts

## Content Management

- All content is written in MDX format with frontmatter
- Velite processes content and generates static data in `.velite/` directory
- Content is organized by collections defined in [velite.config.js](mdc:velite.config.js)
- Each collection has specific schema requirements (title, description, publishDate, etc.)

## Asset Management

- Static assets are stored in [public/](mdc:public/) directory
- Images are organized by content category (study/, writing/, laboratory/)
- Velite handles asset processing and optimization
- Font files are stored in [public/fonts/](mdc:public/fonts/) with local font loading