---
globs: *.mdx,*.md
description: MDX content management and Velite configuration patterns
---

# MDX Content Management

This project uses Velite for MDX content processing and static generation. Follow these patterns for content creation and management.

## Content Structure

### File Organization
- Content files are stored in [src/contents/](mdc:src/contents/) directory
- Follow the directory structure: `[category]/[subcategory]/[filename].mdx`
- Use descriptive filenames that match the content slug
- Example: `study/development/nextjs-deployment.mdx`

### Content Categories
- **Study Content**: `study/development/`, `study/paper-review/`, `study/project/`
- **Writing Content**: `writing/book-review/`, `writing/personal-essay/`, `writing/light-topic/`
- **Laboratory Content**: Experimental features and tools

## MDX Frontmatter Schema

### Required Fields
All MDX files must include these frontmatter fields:
```yaml
---
title: "Post Title"
description: "Brief description of the post"
publishDate: "2024-01-01"
---
```

### Optional Fields
```yaml
---
title: "Post Title"
description: "Brief description"
publishDate: "2024-01-01"
thumbnailUrl: "/path/to/thumbnail.jpg"
---
```

## Velite Configuration

### Collection Definitions
Collections are defined in [velite.config.js](mdc:velite.config.js) with specific patterns:
- Each collection has a `pattern` for file matching
- Schema validation using `s.object()` with required fields
- Transform functions for URL generation and slug processing

### Content Processing
- Velite processes MDX files and generates static data
- Output is stored in `.velite/` directory
- Assets are copied to `public/static/` directory
- Use `#site/contents` import for accessing processed content

## MDX Components

### Custom Components
- MDX components are defined in [src/mdx-components.tsx](mdc:src/mdx-components.tsx)
- Use `MDXContent` component for rendering processed MDX
- Pass custom components via the `components` prop

### Math Support
- KaTeX is configured for mathematical expressions
- Use `$...$` for inline math and `$$...$$` for block math
- Math CSS is imported in [src/app/layout.tsx](mdc:src/app/layout.tsx)

### Code Highlighting
- Shiki is configured with "nord" theme
- Syntax highlighting is automatic for code blocks
- Use triple backticks with language specification

## Content Access Patterns

### Post Retrieval
- Use `getPostBySlug()` function from [src/utils/post.ts](mdc:src/utils/post.ts)
- Pass category and slug parameters
- Returns typed Post object or undefined

### Content Collections
- Import collections from `#site/contents`
- Available collections: `development`, `paperReview`, `project`, `bookReview`, `personalEssay`, `lightTopic`
- Use for generating post lists and navigation

## Asset Management

### Image Assets
- Store images in [public/](mdc:public/) directory
- Organize by content category (study/, writing/, laboratory/)
- Use descriptive filenames and proper extensions
- Reference images with absolute paths from public directory

### Asset Processing
- Velite handles asset optimization and copying
- Assets are processed during build time
- Use proper naming conventions for generated assets

## Content Writing Guidelines

### Markdown Best Practices
- Use proper heading hierarchy (H1 for title, H2 for sections)
- Include alt text for all images
- Use descriptive link text
- Break long paragraphs for readability

### MDX Features
- Use JSX components within markdown
- Import and use custom React components
- Use proper TypeScript typing for custom components
- Follow React component patterns within MDX

### Content Organization
- Group related content in subdirectories
- Use consistent naming conventions
- Include proper metadata for SEO
- Write descriptive descriptions for better discoverability